#!/usr/bin/env python

import rospy
from geometry_msgs.msg import Point
from std_msgs.msg import Float32, Bool
from tf2_msgs.msg import TFMessage
import numpy as np
from datetime import datetime

current_x = 0
current_y = 0
current_ang = 0
thrust = 0
steer_ang = 0
close = False

def get_dist_direct(currentX, currentY, destX, destY):
  dx = destX-currentX
  dy = destY-currentY
  
  print("dest")
  print(destX)
  print(destY)
  print("curr")
  print(currentX)
  print(currentY)
  
  utm_dist = np.sqrt(dx**2 + dy**2)
  if dx != 0:
    utm_angle = np.arctan2(dy,float(dx))
  else:
    utm_angle = np.pi/2*np.sign(dy)
  
  return utm_dist, utm_angle
  
def steeringControl(currentHeading,desiredHeading):
  turn_flg = True
  if (desiredHeading > currentHeading):
    turnRightOption = (desiredHeading - currentHeading) - 2*np.pi
    turnLeftOption = desiredHeading - currentHeading
  elif (currentHeading > desiredHeading):
    turnLeftOption = 2*np.pi - (currentHeading - desiredHeading)
    turnRightOption = desiredHeading - currentHeading
  else:
    turn_flg = False
    
  print("left")
  print(turnLeftOption)
  print("right")
  print(turnRightOption)
    
  if turn_flg:
    if (abs(turnRightOption) < abs(turnLeftOption)):
      error=turnRightOption
    else:
      error=turnLeftOption
    error = max(error,-np.pi/4)
    error = min(error, np.pi/4)
    angle = error
  else:
    angle = 0 
  return angle
      
def speedController(distance):
  gain = 1
  global close
  if distance < .1:
    thrust = 0
    close = True
  else:
    thrust = -10
    close = False
  
  return thrust
  
def callback_loc(data):
  global current_x
  current_x = data.transforms[0].transform.translation.x
  global current_y 
  current_y = data.transforms[0].transform.translation.y
  x = data.transforms[0].transform.rotation.x
  y = data.transforms[0].transform.rotation.y
  z = data.transforms[0].transform.rotation.z
  w = data.transforms[0].transform.rotation.w
  
  global current_ang 
  current_ang = np.arctan2(2 * (w*z + x*y), w*w + x*x - y*y -z*z)
  
def callback_nav(data):
  x = data.x
  y = data.y
  dist, ang = get_dist_direct(current_x, current_y, x, y)
  
  global thrust
  global steer_ang
  
  thrust = speedController(dist)
  steer_ang = steeringControl(current_ang, ang)
  
if __name__=='__main__':
  rospy.init_node('thrust_steer')
  rospy.Subscriber("/tf",TFMessage,callback_loc)
  rospy.Subscriber("/gps_point",Point,callback_nav)
  leftThrustPub = rospy.Publisher('/leftMotorSpeed', Float32, queue_size=100)
  rightThrustPub = rospy.Publisher('/rightMotorSpeed', Float32, queue_size=100)
  steerAnglePub = rospy.Publisher('/steerMotorAngle', Float32, queue_size=100)
  closePub = rospy.Publisher('/closeToGoal', Bool, queue_size=100)
  rate = rospy.Rate(10)
  while not rospy.is_shutdown():
    leftThrustPub.publish(thrust)
    rightThrustPub.publish(thrust)
    steerAnglePub.publish(steer_ang)
    closePub.publish(close)
    rate.sleep()
