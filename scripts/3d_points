#!/usr/bin/env python
PKG = 'ss_terrain_nav'
import roslib; roslib.load_manifest(PKG)

import rospy
import ros_numpy
from scipy.spatial.transform import Rotation as R
from rospy.numpy_msg import numpy_msg
from rospy_tutorials.msg import Floats
from pyquaternion import Quaternion

from sensor_msgs.msg import PointCloud2
from tf2_msgs.msg import TFMessage
from sensor_msgs.msg import Image
from std_msgs.msg import Float32MultiArray

import numpy as np
import cv2
from cv_bridge import CvBridge, CvBridgeError
from numpy import savetxt

trans = np.array([])
quat = np.array([])
rquat = np.array([])

near_clip = .01
far_clip = 3.5
v_res = 640
u_res = 480
focal_length = 57 * 3.14/180
dists = np.empty((u_res,v_res,3))

s_phi = np.repeat(np.reshape(np.sin((np.arange(v_res)-v_res/2)*focal_length/v_res),(1,v_res)),u_res,axis=0)
c_phi = np.repeat(np.reshape(np.cos((np.arange(v_res)-v_res/2)*focal_length/v_res),(1,v_res)),u_res,axis=0)
#flipped sin and cos to account for -a term
c_theta = np.repeat(np.reshape(np.sin((u_res/2-np.arange(u_res))*focal_length/u_res),(u_res,1)),v_res,axis=1)
s_theta = np.repeat(np.reshape(np.cos((u_res/2-np.arange(u_res))*focal_length/u_res),(u_res,1)),v_res,axis=1)

def callback_loc(data):
  global trans
  global quat
  global rquat
  if data.transforms[0].child_frame_id == 'kinect':
    loc_x = data.transforms[0].transform.translation.x
    loc_y = data.transforms[0].transform.translation.y
    loc_z = data.transforms[0].transform.translation.z
    rot_x = data.transforms[0].transform.rotation.x
    rot_y = data.transforms[0].transform.rotation.y
    rot_z = data.transforms[0].transform.rotation.z
    rot_w = data.transforms[0].transform.rotation.w
    trans = np.array([loc_x, loc_y, loc_z])
    quat = np.array([rot_x, rot_y, rot_z, rot_w])
  

def callback_depth(msg):
  global trans
  global quat
  global c_phi
  global s_phi
  global c_theta
  global s_theta
  global dists
  near_clip = .01
  far_clip = 3.5
  v_res = 640
  u_res = 480
  focal_length = 57 * 3.14/180
  depth = msg.data
  depth = np.reshape(np.asarray(depth),(u_res,v_res))
  array = np.zeros((u_res,v_res,3))
  distances = (far_clip-near_clip)*(np.ones((480,640))-depth) + near_clip
  
  array[:,:,2] = np.multiply(distances,c_theta)
  array[:,:,1] = np.multiply(np.multiply(distances,s_theta),c_phi)
  array[:,:,0] = np.multiply(np.multiply(distances,s_theta),s_phi)
  r = R.from_quat(quat)
  for i in range(dists.shape[0]):
    dists[i,:,:] = r.apply(array[i])
  dists = dists + trans
  dists = dists.astype(np.float32)
  
  
if __name__=='__main__':
  rospy.init_node('global_points')
  rospy.Subscriber("/tf",TFMessage,callback_loc)
  rospy.Subscriber("/camera/depth/points",Float32MultiArray,callback_depth)
  pub = rospy.Publisher('/global_points', numpy_msg(Floats), queue_size=100)
  rate = rospy.Rate(10)
  while not rospy.is_shutdown():
    pub.publish(dists)
    rate.sleep()
