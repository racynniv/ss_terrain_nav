#!/usr/bin/env python

import rospy
import struct
from std_msgs.msg import Float32MultiArray, Header
from sensor_msgs.msg import Image, PointCloud2, PointField
from sensor_msgs import point_cloud2
from geometry_msgs.msg import Point
import numpy as np
from cv_bridge import CvBridge
from datetime import datetime


pub = rospy.Publisher('/kinect/depth/pointcloud', PointCloud2, queue_size=100)

rgb = []
now = datetime.now()
then = datetime.now()

def callback_rgb(msg):
  global rgb 
  bridge = CvBridge()
  rgb = bridge.imgmsg_to_cv2(msg, desired_encoding='passthrough')
  
def callback_depth(msg):
  near_clip = .01
  far_clip = 3.5
  v_res = 640
  u_res = 480
  focal_length = 57 * 3.14/180
  global rgb
  global now
  global then
  depth = msg.data
  depth = np.reshape(np.asarray(depth),(rgb.shape[0],rgb.shape[1]))
  if depth.shape[0] != rgb.shape[0] or depth.shape[1] != rgb.shape[1]:
    print("size mismatch")
    return
  else:
    print("start")
    now = datetime.now()
    diff = now - then
    print(diff)
    pointcloud = PointCloud2()
    points = []
    for i in range(depth.shape[0]):
      for j in range(depth.shape[1]):
        z = far_clip * depth[i,j] + near_clip
        y = z*np.sin((j-v_res/2)*focal_length/v_res)
        x = z*np.sin((i-u_res/2)*focal_length/u_res)
        r = rgb[i,j,0]
        g = rgb[i,j,1]
        b = rgb[i,j,2]
        a = 255
        color = struct.unpack('I', struct.pack('BBBB', b, g, r, a))[0]
        #print(color)
        pt = [x, y, z, color]
        points.append(pt)
    print(points[0])
    then = datetime.now()
    diff = then - now
    print(diff)
    fields = [PointField('x', 0, PointField.FLOAT32, 1),
          PointField('y', 4, PointField.FLOAT32, 1),
          PointField('z', 8, PointField.FLOAT32, 1),
          # PointField('rgb', 12, PointField.UINT32, 1),
          PointField('rgba', 12, PointField.UINT32, 1),
          ]
        
    header = Header()
    header.frame_id = "map"
    pc2 = point_cloud2.create_cloud(header, fields, points)
    pc2.header.stamp = rospy.Time.now()
    pub.publish(pc2)

def img2cloud():
  rospy.init_node('cloud')
  rospy.Subscriber("/camera/color/image",Image,callback_rgb)
  rospy.Subscriber("/camera/depth/points",Float32MultiArray,callback_depth)
  rospy.spin()
  
if __name__=='__main__':
  img2cloud()
